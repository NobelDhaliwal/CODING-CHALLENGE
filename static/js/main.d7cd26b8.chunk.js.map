{"version":3,"sources":["Component/Box.js","Component/Data.js","Component/ImageContainer.js","App.js","index.js"],"names":["Box","props","handleChangeColor","bind","this","changeColor","color","onClick","style","backgroundColor","width","height","Component","rgbValue","Math","floor","random","generateColors","num","colors","i","red","blue","green","push","ImageContainer","state","c","newColor","setState","st","map","className","defaultProps","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sPA6BeA,E,kDA1Bb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBAFR,E,qDAMnB,WAEEC,KAAKH,MAAMI,YAAYD,KAAKH,MAAMK,S,oBAGpC,WACE,OACE,qBAEEC,QAASH,KAAKF,kBACdM,MAAO,CACLC,gBAAiBL,KAAKH,MAAMK,MAC5BI,MAAO,OACPC,OAAQ,e,GApBAC,aCFZC,EAAW,WACf,OAAOC,KAAKC,MAAsB,IAAhBD,KAAKE,WAInBC,EAAiB,SAACC,GAGtB,IAFA,IAAIC,EAAS,GAEJC,EAAI,EAAGA,EAAIF,EAAKE,IAAK,CAC5B,IAAMC,EAAMR,IACNS,EAAOT,IACPU,EAAQV,IACdM,EAAOK,KAAP,cAAmBH,EAAnB,YAA0BC,EAA1B,YAAkCC,EAAlC,MAEF,OAAOJ,GCTHM,E,kDAKJ,WAAYxB,GAAQ,IAAD,8BACjB,cAAMA,IACDyB,MAAQ,CAEXP,OAAQF,EAAe,EAAKhB,MAAMiB,MAEpC,EAAKb,YAAc,EAAKA,YAAYF,KAAjB,gBANF,E,+CASnB,SAAYwB,GAEV,IAAIC,EACJ,GACEA,EAAQ,yBACJf,IADI,uBAEJA,IAFI,uBAGJA,IAHI,oBASDe,IAAaD,GAItBvB,KAAKyB,UAAS,SAACC,GAAD,MAAS,CACrBX,OAAQW,EAAGX,OAAOY,KAAI,SAACzB,GACrB,OAAIA,IAAUqB,EAAUrB,EACjBsB,W,oBAKb,WAAU,IAAD,OACP,OACE,qBAAKI,UAAU,iBAAf,SACG5B,KAAKsB,MAAMP,OAAOY,KAAI,SAACzB,GAAD,OAErB,aADA,CACC,EAAD,CAAKA,MAAOA,EAAOD,YAAa,EAAKA,uB,GA5ClBO,aAAvBa,EAEGQ,aAAe,CACpBf,IAAK,IAgDMO,QC3CAS,EAVH,WACV,OACE,mCACE,qBAAKF,UAAU,MAAf,SACE,cAAC,EAAD,SCDRG,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.d7cd26b8.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Box extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleChangeColor = this.handleChangeColor.bind(this);\r\n  }\r\n\r\n  // Handler callback\r\n  handleChangeColor() {\r\n    // Call parent component changeColor  method passing the color value of div\r\n    this.props.changeColor(this.props.color);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        //  click handler to the div and pass a callback\r\n        onClick={this.handleChangeColor}\r\n        style={{\r\n          backgroundColor: this.props.color,\r\n          width: \"75px\",\r\n          height: \"600px\",\r\n        }}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Box;\r\n","const rgbValue = () => {\r\n  return Math.floor(Math.random() * 256);\r\n};\r\n\r\n// Method generates an array of rgb colors\r\nconst generateColors = (num) => {\r\n  let colors = [];\r\n\r\n  for (let i = 0; i < num; i++) {\r\n    const red = rgbValue();\r\n    const blue = rgbValue();\r\n    const green = rgbValue();\r\n    colors.push(`rgb(${red},${blue},${green})`);\r\n  }\r\n  return colors;\r\n};\r\n\r\nexport { rgbValue, generateColors };\r\n","import React, { Component } from \"react\";\r\nimport \"./ImageContainer.css\";\r\nimport Box from \"./Box\";\r\nimport { rgbValue, generateColors } from \"./Data\";\r\n\r\nclass ImageContainer extends Component {\r\n  // Number of color boxes want shows by default\r\n  static defaultProps = {\r\n    num: 18,\r\n  };\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      // Color state contains array of rgb color values\r\n      colors: generateColors(this.props.num),\r\n    };\r\n    this.changeColor = this.changeColor.bind(this);\r\n  }\r\n\r\n  changeColor(c) {\r\n    // Create new random rgb color\r\n    let newColor;\r\n    do {\r\n      newColor = `rgb( \r\n        ${rgbValue()}, \r\n        ${rgbValue()}, \r\n        ${rgbValue()} \r\n      )`;\r\n\r\n      // If new rgb color is equal to previous\r\n      // color of the box then again create new\r\n      // rgb color value\r\n    } while (newColor === c);\r\n\r\n    // Change colors array state by inserting\r\n    // new color value in place of previous color\r\n    this.setState((st) => ({\r\n      colors: st.colors.map((color) => {\r\n        if (color !== c) return color;\r\n        return newColor;\r\n      }),\r\n    }));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"ImageContainer\">\r\n        {this.state.colors.map((color) => (\r\n          // For each color make a box component\r\n          <Box color={color} changeColor={this.changeColor} />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ImageContainer;\r\n","import React from \"react\";\nimport ImageContainer from \"./Component/ImageContainer.js\";\n\nconst App = () => {\n  return (\n    <>\n      <div className=\"App\">\n        <ImageContainer />\n      </div>\n    </>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}